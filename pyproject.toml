[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "corditea"
dynamic = ["version"]
description = "Utility nodes for gunpowder"
readme = "README.md"
license = "BSD-2-Clause"
requires-python = ">=3.7"
authors = [{ name = "Larissa Heinrich", email = "heinrichl@janelia.hhmi.org" }]
classifiers = [
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dependencies = ["gunpowder", "numpy", "scipy", "scikit-image"]

[project.optional-dependencies]

[project.urls]
Documentation = "https://github.com/saalfeldlab/corditea#readme"
Issues = "https://github.com/saalfeldlab/corditea/issues"
Source = "https://github.com/saalfeldlab/corditea"


[tool.hatch.version]
path = "src/corditea/__about__.py"

[tool.hatch.envs.default]
type = "conda"
command = "mamba"
conda-forge = true
dependencies = []

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]


[tool.hatch.envs.dev]
type = "conda"
command = "mamba"
conda-forge = true
detached = false
skip-install = false
dependencies = ["jupyter", "pytest", "coverage[toml]>=6.5"]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/fly_organelles tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]


[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["fly_organelles"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["fly_organelles", "tests"]
branch = true
parallel = true
omit = ["src/fly_organelles/__about__.py"]

[tool.coverage.paths]
fly_organelles = ["src/fly_organelles", "*/fly-organelles/src/fly_organelles"]
tests = ["tests", "*/fly-organelles/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


[tool.pixi.project]
channels = ["nvidia", "pytorch", "conda-forge"]
platforms = ["linux-64"]

[tool.pixi.tasks]
test = "pytest -v"
test-cov = "coverage run -m pytest tests"
cov-report = { cmd = ["coverage combine", "coverage report"], depends-on = ["test-cov"] }
lint = "ruff check ."
format = "ruff format ."
typecheck = "mypy --install-types --non-interactive src/organelle_mapping tests"

[tool.pixi.dependencies]
python = "3.11.*"

[tool.pixi.pypi-dependencies]
corditea = { path = ".", editable = true }
zarr = "<3.0.0"



[tool.pixi.feature.dev.dependencies]
pytest = ">=7.3"
pytest-cov = ">=4.0"
coverage = ">=6.5"
ruff = ">=0.1.0"
mypy = ">=1.0"
black = ">=23.1.0"



[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
